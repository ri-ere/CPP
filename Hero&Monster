#include <iostream>

using namespace std;
class Hero{
private:
    int hp;
    int mp;
    //int coord_x, coord_y;
    bool is_dead;
    const int default_damage;
    //const int default_defense;
public:
    Hero();
    ~Hero();
    int attack();
    void be_attacked(int damage_earn);
    void show_status();
};
Hero::Hero() : hp(100), mp(50), is_dead(false), default_damage(10) {}
Hero::~Hero(){}
int Hero::attack(){ return default_damage; }
void Hero::be_attacked(int damage_earn){
    hp -= damage_earn;
    if(hp<=0) is_dead = true;
}
void Hero::show_status(){
    cout<<"****HERO****"<<endl;
    cout<<"HP : "<< hp <<endl;
    cout<<"MP : "<< mp <<endl;
}

class Monster{
private:
    int hp;
    int mp;
    //int coord_x, coord_y;
    bool is_dead;
    const int default_damage;
    //const int default_defense;
public:
    Monster();
    ~Monster();
    int attack();
    void be_attacked(int damage_earn);
    void show_status();
};
Monster::Monster() : hp(30), mp(0), is_dead(false), default_damage(5) {}
Monster::~Monster() {}
int Monster::attack() { return default_damage; }
void Monster::be_attacked(int damage_earn){
    hp-=damage_earn;
    if(hp<=0) is_dead = true;
}
void Monster::show_status(){
    cout<<"****Monster****"<<endl;
    cout<<"HP : "<< hp <<endl;
    cout<<"MP : "<< mp <<endl;
}

int main(){
    Hero hero;
    Monster monster;
    hero.show_status();
    monster.show_status();
    cout<<endl<< "monster attack hero" << endl<<endl;
    hero.be_attacked(monster.attack());
    hero.show_status();
    monster.show_status();    
}
